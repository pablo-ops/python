The except clause(s) specify one or more exception handlers.
When no exception occurs in the try clause, no exception handler is executed.
When an exception occurs in the try suite, a search for an exception handler is started.
This search inspects the except clauses in turn until one is found that matches the exception.
An expression-less except clause, if present, must be last; it matches any exception.
For an except clause with an expression, that expression is evaluated, and the clause matches the exception if the resulting object is “compatible” with the exception.
An object is compatible with an exception if it is the class or a base class of the exception object or a tuple containing an item compatible with the exception.

If no except clause matches the exception, the search for an exception handler continues in the surrounding code and on the invocation stack. [1]

If the evaluation of an expression in the header of an except clause raises an exception, the original search for a handler is canceled and a search starts for the new exception in the surrounding code and on the call stack (it is treated as if the entire try statement raised the exception).

When a matching except clause is found, the exception is assigned to the target specified after the as keyword in that except clause, if present, and the except clause’s suite is executed. 
All except clauses must have an executable block. When the end of this block is reached, execution continues normally after the entire try statement. 
(This means that if two nested handlers exist for the same exception, and the exception occurs in the try clause of the inner handler, the outer handler will not handle the exception.)

